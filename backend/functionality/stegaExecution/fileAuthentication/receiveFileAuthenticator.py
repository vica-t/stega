import zlib
from backend.functionality.stegaExecution.fileAuthentication.fileAuthenticator import FileAuthenticator


class ReceiveFileAuthenticator(FileAuthenticator):
    """
    ReceiveFileAuthenticator

    This class is responsible for validating file authenticators used for receiving files.

    """

    def __init__(self):
        """
        Initialize the object.

        Parameters:
            self: The instance of the class.

        Returns:
            None
        """
        pass
    
    
    
    def validateAuthenticator(self, authenticator, userHash):
        """
        :param authenticator: The authenticator generated by the user.
        :param userHash: The hash of the user's information.
        :return: A tuple containing a boolean value indicating if the authenticator is valid or not, and a dictionary containing additional data if the authenticator is valid, or None if it is not valid.
        """
        # extract data from auth
        data = self.extractDataFromAuthenticator(authenticator)
        if not data:
            return False, None
        aesKey, additionalData, reedSolomonAdditionalData, rawUserAuths = data
        # generate raw auth to check
        if not self.generateAndCheckAuthenticator(rawUserAuths, aesKey, userHash, additionalData):
            print('auth is wrong')
            return False, None
        # return true/false and info
        data = {'aesKey':aesKey, 'additionalData':additionalData, 'reedSolomonAdditionalData':reedSolomonAdditionalData}
        return True, data

    
    
    def extractDataFromAuthenticator(self, authenticator):
        """
        Extracts data from the given authenticator.

        :param authenticator: The authenticator from which to extract data.
        :return: A tuple containing the AES key, additional data, Reed-Solomon additional data, and raw user authenticators.
                 Returns None if any of the extraction steps fail.
        """
        userAuthLen = self.getLengthOfUserAuthenticators(authenticator)
        authenticator = authenticator[1:]
        # get reed solomon additional data
        authenticator, reedSolomonAdditionalData = self.getReedSolomonAdditionalDataFromAuthenticator(authenticator)
        if not reedSolomonAdditionalData:
            return None
        # get additional data (decompressed)
        additionalData = self.getAdditionalDataFromAuthenticator(authenticator, userAuthLen)
        if not additionalData:
            return None
        # get keys and raw auths
        res = self.getAesKeyAndUserAuthenticatorsFromAuthenticator(authenticator, userAuthLen)
        if not res:
            return None
        aesKey, rawUserAuths = res
        # return key, additional data, raw user list
        return aesKey, additionalData, reedSolomonAdditionalData, rawUserAuths
    
    
    def getLengthOfUserAuthenticators(self, authenticator):
        """

        :param authenticator: The authenticator representing the user.
        :return: The length of user authenticators.

        """
        userCount = int(authenticator[0])
        userAuthLen = userCount * (64 + 32)
        return userAuthLen
    
    
    def getReedSolomonAdditionalDataFromAuthenticator(self, authenticator):
        """

        :param authenticator: The input authenticator string from which to extract the Reed Solomon additional data.
        :return: A tuple containing two elements. The first element is the authenticator string without the extracted additional data. The second element is the extracted Reed Solomon additional data.
        :rtype: tuple

        """
        try:
            additionalDataLen = 32 + 3
            additionalData = authenticator[-additionalDataLen:]
            authenticator = authenticator[:-additionalDataLen]
            return authenticator, additionalData
        except:
            print('couldn\'t extract reed solomon additional data')
            return None, None
    
    
    def getAdditionalDataFromAuthenticator(self, authenticator, userAuthLen):
        """
        :param authenticator: The authenticator data from the user authentication response.
        :param userAuthLen: The length of the user authentication data that needs to be removed from the authenticator.

        :return: The additional data extracted from the authenticator.

        """
        #try:
        compressedAdditionalData = authenticator[:-userAuthLen]
        additionalData = self.decompressString(compressedAdditionalData)
        return additionalData

    
    def decompressString(self, compressedStr):
        """
        Decompresses a compressed string.

        :param compressedStr: The compressed string to decompress.
        :return: The decompressed string.
        """
        # Decode the base64 string to bytes
        compressedBytes = bytes.fromhex(compressedStr)
        # Decompress the bytes
        decompressedBytes = zlib.decompress(compressedBytes)
        # Decode the decompressed bytes back to string
        decompressedStr = decompressedBytes.decode('utf-8')
        return decompressedStr
    
    
    def getAesKeyAndUserAuthenticatorsFromAuthenticator(self, authenticator, userAuthLen):
        """
        :param authenticator: The authenticator from which to retrieve the AES keys and user authenticators.
        :param userAuthLen: The length of each user authenticator.
        :return: A tuple containing the AES key and a list of raw user authenticators.

        """
        try:
            # get the piece of string
            userAuthenticators = authenticator[-userAuthLen:]
            # divide into three
            userAuthenticators = [userAuthenticators[i:i+64+32] for i in range(0, len(userAuthenticators), 64+32)]
            # get the key and the raw auth from each
            dividedUserAuthenticators = []
            for userAuth in userAuthenticators:
                dividedUserAuth = {}
                dividedUserAuth['rawAuth'], dividedUserAuth['aesKey'] = self.getAesKeyAndRawAuthenticatorFromUserAuthenticator(userAuth)
                dividedUserAuthenticators.append(dividedUserAuth)
            # check keys
            if not self.compareUserAesKeys(dividedUserAuthenticators):
                print('aes keys don\'t match')
                return None
            # return
            aesKey = dividedUserAuthenticators[0]['aesKey']
            rawUserAuths = [dividedUserAuth['rawAuth'] for dividedUserAuth in dividedUserAuthenticators]
            return aesKey, rawUserAuths
        except:
            print('couldn\'t get aes keys and user auths')
            return None
    
    def getAesKeyAndRawAuthenticatorFromUserAuthenticator(self, userAuthenticator):
        """
        :param userAuthenticator: The user authenticator string from which to extract the AES key and raw authenticator.
        :return: A tuple containing the raw authenticator and AES key extracted from the userAuthenticator string.
        """
        rawAuth = ''
        aesKey = ''
        for i in range(0, len(userAuthenticator), 3):
            rawAuth += userAuthenticator[i:i+2]
            aesKey += userAuthenticator[i+2]
        return rawAuth, aesKey
    
    def compareUserAesKeys(self, dividedUserAuthenticators):
        """
        Compare the AES keys of the divided user authenticators.

        :param dividedUserAuthenticators: A list of user authenticators with AES keys.
        :return: True if all AES keys are equal, False otherwise.
        """
        aesKeys = [dividedUserAuth['aesKey'] for dividedUserAuth in dividedUserAuthenticators]
        equalKeys = all(key == aesKeys[0] for key in aesKeys)
        return equalKeys

    
    
    def generateAndCheckAuthenticator(self, rawUserAuths, aesKey, userHash, additionalData):
        """
        Generates a raw authenticator and checks if it exists in the given list of rawUserAuths.

        :param rawUserAuths: A list of raw user authenticators.
        :param aesKey: The AES key used for generating the raw authenticator.
        :param userHash: The user hash used for generating the raw authenticator.
        :param additionalData: Additional data used for generating the raw authenticator.
        :return: True if the generated raw authenticator is found in the list of rawUserAuths, False otherwise.
        """
        generatedRawAuth = self.generateRawAuthenticator(aesKey, userHash, additionalData)
        if generatedRawAuth in rawUserAuths:
            return True
        return False

